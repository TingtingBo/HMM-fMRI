function [hmm,Gamma,Xi,X,fehist,actstates]=hmmtrain(data,T,hmm,X,Gamma)
%
% Train Hidden Markov Model using using Variational Framework
%
% INPUTS:
%
% data          observations - a struct with X (time series) and C (classes)
% T             Number of time points for each latent time series
% hmm           hmm structure with options specified in hmm.train
% Gamma         Initial state courses
% X             Initial latent signal
%
% OUTPUTS
% hmm           estimated HMMMAR model
% Gamma         estimated p(state | data)
% Xi            joint probability of past and future states conditioned on data
% X             Latent signal
% fehist        historic of the free energies across iterations
% knocked       states knocked out by the Bayesian inference
%
% hmm.Pi          - intial state probability
% hmm.P           - state transition matrix
% hmm.state(k).$$ - whatever parameters there are in the observation model
%
% Author: Diego Vidaurre, OHBA, University of Oxford

N = length(T); K = hmm.train.K;
ndim = size(data.Y,2);

fehist=[];
actstates = ones(1,K);
cyc_to_go = 0;

%load('/tmp/X_orig.mat')
%X.mu(1:1100,:) = X_orig(1:1100,:); X.mu(1151:end,:) = X_orig(1151:end,:);   
load('/tmp/Gamma_orig.mat')
Gamma = Gamma_orig;
%Gammasum = sum(Gamma); Xi = zeros(size(Gamma,1)-1,K,K);
%load('/tmp/hmm_orig.mat')
%hmm.P = hmm_orig.P; hmm.Pi = hmm_orig.Pi; 
% for tr=1:length(hmm_orig.HRF),  
%        hmm.HRF(tr).B = hmm_orig.HRF(tr).B; hmm.HRF(tr).sigma = hmm_orig.HRF(tr).sigma; hmm.HRF(tr).alpha = hmm_orig.HRF(tr).alpha; 
% end
% for k=1:length(hmm_orig.state),  
%        hmm.state(k).Mean = hmm_orig.state(k).Mean; hmm.state(k).Omega = hmm_orig.state(k).Omega;
%        hmm.state(k).Omega.irate = inv(hmm.state(k).Omega.rate);
%  end
    

for cycle=1:hmm.train.cyc
        
    if 1 %cycle==1, %hmm.train.updateGamma,
       
%         figure(1)
%         TG = 18825;
%         sTS = zeros(TG,1);
%         for s=1:15, sTS((1:TG/15) + (s-1)* TG/15) = s/15-0.01; end
%         sTT = zeros(T(1),1);
%         for j=1:5, sTT((1:TG/15/5) + (j-1)* TG/15/5) = j/5-0.01; end
%         sTT = repmat(sTT,15,1);
%         plot(Gamma,'LineWidth',3)
%         hold on; plot(sTS,'k'); plot(sTT,'k'); hold off
%         ylim([-0.1 1.1]); xlim([1 size(Gamma,1)])
%         
%         figure(2)
%         plot(Gamma(1:TG/15,:),'LineWidth',3)
%         hold on; plot(sTS,'k'); plot(sTT,'k'); hold off
%         ylim([-0.1 1.1]); xlim([1 TG/15])
        
        %%%% E step - Gamma
        if hmm.K>1 || cycle==1
            [Gamma,Gammasum,Xi]=hsinference(data,T,hmm,X);
            %Gamma = Gammatrue;
            %[ndim mean(Gamma)]
            if size(Gammasum,1)>1, Gammasum = sum(Gammasum); end
%             if cycle>1 && (hmm.K>1 && any(round(Gammasum) == sum(T)))
%                 fprintf('cycle %i: All the points collapsed in one state \n',cycle)
%                 break
%             end
        end
        % any state to remove?
        as1 = find(actstates==1);
        [as,hmm,Gamma,Xi] = getactivestates(hmm,Gamma,Xi);
        if any(as==0), cyc_to_go = hmm.train.cycstogoafterevent; end
        actstates(as1(as==0)) = 0;
%         if cycle>1 && size(Gamma,2)==1 
%             fprintf('cycle %i: All the points collapsed in one state \n',cycle)
%             break
%         end
        
        %%%% Free energy computation
        fehist = [fehist; sum(evalfreeenergy(data,T,hmm,Gamma,Xi,X))];
        strwin = ''; if hmm.train.meancycstop>1, strwin = 'windowed'; end
        if cycle>(hmm.train.meancycstop+1) && cyc_to_go==0
            chgFrEn = mean( fehist(end:-1:(end-hmm.train.meancycstop+1)) - fehist(end-1:-1:(end-hmm.train.meancycstop)) )  ...
                / (fehist(1) - fehist(end));
            %/ abs(mean(fehist(end-1:-1:(end-hmm.train.meancycstop)))) * 100;
            %if chgFrEn>0.03, keyboard; end
            if hmm.train.verbose, fprintf('cycle %i free energy = %g, %s relative change = %g \n',cycle,fehist(end),strwin,chgFrEn); end
            %if hmm.train.verbose, fprintf('cycle %i free energy = %g, %s relative change = %g, fit(Gamma) = %g, fit(X) = %g \n',...
            %        cycle,fehist(end),strwin,chgFrEn,sum(diag(abs(corr(Gamma,Gamma_orig)))),sum(abs(X.mu(:)-X_orig(:)))  ); end
            %if (abs(chgFrEn) < hmm.train.tol), break; end
        elseif hmm.train.verbose && cycle>1, fprintf('cycle %i free energy = %g \n',cycle,fehist(end));
        end
        if cyc_to_go>0, cyc_to_go = cyc_to_go - 1; end
        
    else
        Xi=[]; fehist=0;
    end
    
    %%% E step - Latent signal
    X = obsinference(data,T,hmm,Gamma,X);
    
%     subplot(2,1,1);plot([X.mu(1001:1500,1) X_orig(1001:1500,1)])
%     subplot(2,1,2);plot([X.mu(1001:1500,2) X_orig(1001:1500,2)])
    %pause(0.25)
    
    %%%% M STEP

    % Gaussian observation model    
    hmm = obsupdate(hmm,Gamma,X);
    
    %HRF model
    hmm = HRFupdate(data,T,hmm,X);
    
    % transition matrices and initial state
    if hmm.train.updateGamma, 
        hmm = hsupdate(hmm,T,Xi,Gamma);
    else
        break
    end
        
end

if hmm.train.verbose
    fprintf('Model: %d kernels, %d dimension(s), %d data samples \n',K,ndim,sum(T));
end

return;

